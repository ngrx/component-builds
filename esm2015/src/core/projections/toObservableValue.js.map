{"version":3,"file":"toObservableValue.js","sourceRoot":"ng://@ngrx/component/","sources":["src/core/projections/toObservableValue.ts"],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,IAAI,EAAE,EAAE,EAA+B,MAAM,MAAM,CAAC;;;;;;;;;;;;;;;;;;;AAiB7D,MAAM,UAAU,iBAAiB,CAAI,CAAM;IACzC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC","sourcesContent":["import { from, of, Observable, ObservableInput } from 'rxjs';\n\n/**\n * @description\n *\n * This operator ensures the passed value is of the right type for `CdAware`.\n * It takes `null`, `undefined` or `Observable<T>` and returns `Observable<null, undefined, T>`.\n * Every other value throws an error.\n *\n * ```ts\n * import { toObservableValue } from `projections/toObservableValue`;\n *\n * const toObservableValue()\n *  .pipe(switchAll())\n *  .subscribe((n) => console.log(n););\n * ```\n */\nexport function toObservableValue<T>(p: any): Observable<T | undefined | null> {\n  return p ? from(p) : of(p);\n}\n"]}