{"version":3,"file":"push.pipe.js","sourceRoot":"ng://@ngrx/component/","sources":["src/push/push.pipe.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EACL,iBAAiB,EAEjB,MAAM,EAEN,IAAI,GAGL,MAAM,eAAe,CAAC;AACvB,OAAO,EAIL,OAAO,GAER,MAAM,MAAM,CAAC;AACd,OAAO,EAAE,oBAAoB,EAAE,GAAG,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAC;AAC3E,OAAO,EAGL,aAAa,EACb,SAAS,GACV,MAAM,SAAS,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CjB;IA6BE,kBAAY,KAAwB,EAAE,MAAc;QAApD,iBAYC;QArCgB,kBAAa,GAAG,IAAI,OAAO,EAAkB,CAAC;QAC9C,YAAO,GAAG,IAAI,CAAC,aAAa;aAC1C,YAAY,EAAE;aACd,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;QAIf,8BAAyB,GAEtC;YACF,IAAI;;;;YAAE,UAAC,KAA2B,IAAK,OAAA,CAAC,KAAI,CAAC,aAAa,GAAG,KAAK,CAAC,EAA5B,CAA4B,CAAA;SACpE,CAAC;QACe,yBAAoB,GAA0B;YAC7D,IAAI;;;;YAAE,UAAC,KAAc,IAAK,OAAA,CAAC,KAAI,CAAC,aAAa,GAAG,SAAS,CAAC,EAAhC,CAAgC,CAAA;SAC3D,CAAC;QACe,0BAAqB;;;;;QAAG,UACvC,EAA6B;YAE7B,OAAA,EAAE,CAAC,IAAI,CACL,cAAc,CAAC,KAAI,CAAC,OAAO,CAAC,EAC5B,GAAG;;;;YAAC,UAAC,EAAgB;oBAAhB,kBAAgB,EAAf,cAAM,EAAE,cAAM;gBAClB,OAAO,MAAM,CAAC,IAAI,EAAE,CAAC;YACvB,CAAC,EAAC,CACH;QALD,CAKC,EAAC;QAGF,IAAI,CAAC,OAAO,GAAG,aAAa,CAAI;YAC9B,IAAI,EAAE,SAAS,CAAC;gBACd,MAAM,QAAA;gBACN,KAAK,OAAA;gBACL,OAAO,EAAE,CAAC,mBAAA,KAAK,EAA8B,CAAC,CAAC,OAAO;aACvD,CAAC;YACF,yBAAyB,EAAE,IAAI,CAAC,yBAAyB;YACzD,oBAAoB,EAAE,IAAI,CAAC,oBAAoB;YAC/C,qBAAqB,EAAE,IAAI,CAAC,qBAAqB;SAClD,CAAC,CAAC;QACH,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;IAC/C,CAAC;;;;;;IAQD,4BAAS;;;;;IAAT,UACE,mBAAkE,EAClE,MAA4C;QAA5C,uBAAA,EAAA,WAA2B,SAAS,EAAE,IAAI,EAAE;QAE5C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAChC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACvC,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;;;;IAED,8BAAW;;;IAAX;QACE,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;IAClC,CAAC;;gBA5DF,IAAI,SAAC,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,KAAK,EAAE;;;;gBAjErC,iBAAiB;gBAEjB,MAAM;;IA4HR,eAAC;CAAA,AA7DD,IA6DC;SA5DY,QAAQ;;;;;;IACnB,iCAA4C;;;;;IAE5C,iCAA+D;;;;;IAC/D,2BAEgC;;;;;IAEhC,gCAA8C;;;;;IAC9C,2BAAwD;;;;;IACxD,6CAIE;;;;;IACF,wCAEE;;;;;IACF,yCAQI","sourcesContent":["import {\n  ChangeDetectorRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  Pipe,\n  PipeTransform,\n  Type,\n} from '@angular/core';\nimport {\n  NextObserver,\n  Observable,\n  PartialObserver,\n  Subject,\n  Unsubscribable,\n} from 'rxjs';\nimport { distinctUntilChanged, map, withLatestFrom } from 'rxjs/operators';\nimport {\n  CdAware,\n  CoalescingConfig as PushPipeConfig,\n  createCdAware,\n  setUpWork,\n} from '../core';\n\n/**\n * @Pipe PushPipe\n *\n * @description\n *\n * The `ngrxPush` pipe serves as a drop-in replacement for the `async` pipe.\n * It contains intelligent handling of change detection to enable us\n * running in zone-full as well as zone-less mode without any changes to the code.\n *\n * The current way of binding an observable to the view looks like that:\n *  ```html\n *  {{observable$ | async}}\n * <ng-container *ngIf=\"observable$ | async as o\">{{o}}</ng-container>\n * <component [value]=\"observable$ | async\"></component>\n * ```\n *\n * The problem is `async` pipe just marks the component and all its ancestors as dirty.\n * It needs zone.js microtask queue to exhaust until `ApplicationRef.tick` is called to render all dirty marked components.\n *\n * Heavy dynamic and interactive UIs suffer from zones change detection a lot and can\n * lean to bad performance or even unusable applications, but the `async` pipe does not work in zone-less mode.\n *\n * `ngrxPush` pipe solves that problem.\n *\n * Included Features:\n *  - Take observables or promises, retrieve their values and render the value to the template\n *  - Handling null and undefined values in a clean unified/structured way\n *  - Triggers change-detection differently if `zone.js` is present or not (`detectChanges` or `markForCheck`)\n *  - Distinct same values in a row to increase performance\n *  - Coalescing of change detection calls to boost performance\n *\n * @usageNotes\n *\n * `ngrxPush` pipe solves that problem. It can be used like shown here:\n * ```html\n * {{observable$ | ngrxPush}}\n * <ng-container *ngIf=\"observable$ | ngrxPush as o\">{{o}}</ng-container>\n * <component [value]=\"observable$ | ngrxPush\"></component>\n * ```\n *\n * @publicApi\n */\n@Pipe({ name: 'ngrxPush', pure: false })\nexport class PushPipe<S> implements PipeTransform, OnDestroy {\n  private renderedValue: S | null | undefined;\n\n  private readonly configSubject = new Subject<PushPipeConfig>();\n  private readonly config$ = this.configSubject\n    .asObservable()\n    .pipe(distinctUntilChanged());\n\n  private readonly subscription: Unsubscribable;\n  private readonly cdAware: CdAware<S | null | undefined>;\n  private readonly updateViewContextObserver: PartialObserver<\n    S | null | undefined\n  > = {\n    next: (value: S | null | undefined) => (this.renderedValue = value),\n  };\n  private readonly resetContextObserver: NextObserver<unknown> = {\n    next: (value: unknown) => (this.renderedValue = undefined),\n  };\n  private readonly configurableBehaviour = <T>(\n    o$: Observable<Observable<T>>\n  ): Observable<Observable<T>> =>\n    o$.pipe(\n      withLatestFrom(this.config$),\n      map(([value$, config]) => {\n        return value$.pipe();\n      })\n    );\n\n  constructor(cdRef: ChangeDetectorRef, ngZone: NgZone) {\n    this.cdAware = createCdAware<S>({\n      work: setUpWork({\n        ngZone,\n        cdRef,\n        context: (cdRef as EmbeddedViewRef<Type<any>>).context,\n      }),\n      updateViewContextObserver: this.updateViewContextObserver,\n      resetContextObserver: this.resetContextObserver,\n      configurableBehaviour: this.configurableBehaviour,\n    });\n    this.subscription = this.cdAware.subscribe();\n  }\n\n  transform(potentialObservable: null, config?: PushPipeConfig): null;\n  transform(potentialObservable: undefined, config?: PushPipeConfig): undefined;\n  transform(\n    potentialObservable: Observable<S> | Promise<S>,\n    config?: PushPipeConfig\n  ): S;\n  transform(\n    potentialObservable: Observable<S> | Promise<S> | null | undefined,\n    config: PushPipeConfig = { optimized: true }\n  ): S | null | undefined {\n    this.configSubject.next(config);\n    this.cdAware.next(potentialObservable);\n    return this.renderedValue;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n"]}