{"version":3,"file":"let.directive.js","sourceRoot":"ng://@ngrx/component/","sources":["src/let/let.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ChangeDetectorRef,\n  Directive,\n  EmbeddedViewRef,\n  Input,\n  NgZone,\n  OnDestroy,\n  TemplateRef,\n  Type,\n  ViewContainerRef,\n} from '@angular/core';\n\nimport {\n  EMPTY,\n  NextObserver,\n  Observable,\n  PartialObserver,\n  ReplaySubject,\n  Unsubscribable,\n} from 'rxjs';\nimport {\n  catchError,\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport {\n  CdAware,\n  CoalescingConfig as NgRxLetConfig,\n  createCdAware,\n  setUpWork,\n} from '../core';\n\nexport interface LetViewContext<T> {\n  // to enable `let` syntax we have to use $implicit (var; let v = var)\n  $implicit?: T;\n  // to enable `as` syntax we have to assign the directives selector (var as v)\n  ngrxLet?: T;\n  // set context var complete to true (var$; let e = $error)\n  $error?: boolean;\n  // set context var complete to true (var$; let c = $complete)\n  $complete?: boolean;\n}\n\n/**\n * @Directive LetDirective\n *\n * @description\n *\n * The `*ngrxLet` directive serves a convenient way of binding observables to a view context (a dom element scope).\n * It also helps with several internal processing under the hood.\n *\n * The current way of binding an observable to the view looks like that:\n * ```html\n * <ng-container *ngIf=\"observableNumber$ as n\">\n * <app-number [number]=\"n\">\n * </app-number>\n * <app-number-special [number]=\"n\">\n * </app-number-special>\n * </ng-container>\n *  ```\n *\n *  The problem is `*ngIf` is also interfering with rendering and in case of a `0` the component would be hidden\n *\n * Included Features:\n * - binding is always present. (`*ngIf=\"truthy$\"`)\n * - it takes away the multiple usages of the `async` or `ngrxPush` pipe\n * - a unified/structured way of handling null and undefined\n * - triggers change-detection differently if `zone.js` is present or not (`ChangeDetectorRef.detectChanges` or `ChangeDetectorRef.markForCheck`)\n * - triggers change-detection differently if ViewEngine or Ivy is present (`ChangeDetectorRef.detectChanges` or `ÉµdetectChanges`)\n * - distinct same values in a row (distinctUntilChanged operator),\n *\n * @usageNotes\n *\n * The `*ngrxLet` directive take over several things and makes it more convenient and save to work with streams in the template\n * `<ng-container *ngrxLet=\"observableNumber$ as c\"></ng-container>`\n *\n * ```html\n * <ng-container *ngrxLet=\"observableNumber$ as n\">\n * <app-number [number]=\"n\">\n * </app-number>\n * </ng-container>\n *\n * <ng-container *ngrxLet=\"observableNumber$; let n\">\n * <app-number [number]=\"n\">\n * </app-number>\n * </ng-container>\n * ```\n *\n * In addition to that it provides us information from the whole observable context.\n * We can track the observables:\n * - next value\n * - error value\n * - complete state\n *\n * ```html\n * <ng-container *ngrxLet=\"observableNumber$; let n; let e = $error, let c = $complete\">\n * <app-number [number]=\"n\"  *ngIf=\"!e && !c\">\n * </app-number>\n * <ng-container *ngIf=\"e\">\n * There is an error: {{e}}\n * </ng-container>\n * <ng-container *ngIf=\"c\">\n * Observable completed: {{c}}\n * </ng-container>\n * </ng-container>\n * ```\n *\n * @publicApi\n */\n@Directive({ selector: '[ngrxLet]' })\nexport class LetDirective<U> implements OnDestroy {\n  private embeddedView: any;\n  private readonly ViewContext: LetViewContext<U | undefined | null> = {\n    $implicit: undefined,\n    ngrxLet: undefined,\n    $error: false,\n    $complete: false,\n  };\n\n  private readonly configSubject = new ReplaySubject<NgRxLetConfig>();\n  private readonly config$ = this.configSubject.pipe(\n    filter(v => v !== undefined && v !== null),\n    distinctUntilChanged(),\n    startWith({ optimized: true })\n  );\n\n  protected readonly subscription: Unsubscribable;\n  private readonly cdAware: CdAware<U | null | undefined>;\n  private readonly resetContextObserver: NextObserver<unknown> = {\n    next: () => {\n      if (this.embeddedView) {\n        this.ViewContext.$implicit = undefined;\n        this.ViewContext.ngrxLet = undefined;\n        this.ViewContext.$error = false;\n        this.ViewContext.$complete = false;\n      }\n    },\n  };\n  private readonly updateViewContextObserver: PartialObserver<\n    U | null | undefined\n  > = {\n    next: (value: U | null | undefined) => {\n      if (!this.embeddedView) {\n        this.createEmbeddedView();\n      }\n      this.ViewContext.$implicit = value;\n      this.ViewContext.ngrxLet = value;\n    },\n    error: (error: Error) => {\n      if (!this.embeddedView) {\n        this.createEmbeddedView();\n      }\n      this.ViewContext.$error = true;\n    },\n    complete: () => {\n      if (!this.embeddedView) {\n        this.createEmbeddedView();\n      }\n      this.ViewContext.$complete = true;\n    },\n  };\n\n  static ngTemplateContextGuard<U>(\n    dir: LetDirective<U>,\n    ctx: unknown\n  ): ctx is LetViewContext<U> {\n    return true;\n  }\n\n  private readonly configurableBehaviour = <T>(\n    o$: Observable<Observable<T>>\n  ): Observable<Observable<T>> =>\n    o$.pipe(\n      withLatestFrom(this.config$),\n      map(([value$, config]) => {\n        return value$.pipe(catchError(e => EMPTY));\n      })\n    );\n\n  @Input()\n  set ngrxLet(\n    potentialObservable: Observable<U> | Promise<U> | null | undefined\n  ) {\n    this.cdAware.next(potentialObservable);\n  }\n\n  @Input()\n  set ngrxLetConfig(config: NgRxLetConfig) {\n    this.configSubject.next(config || { optimized: true });\n  }\n\n  constructor(\n    cdRef: ChangeDetectorRef,\n    ngZone: NgZone,\n    private readonly templateRef: TemplateRef<LetViewContext<U>>,\n    private readonly viewContainerRef: ViewContainerRef\n  ) {\n    this.cdAware = createCdAware<U>({\n      work: setUpWork({\n        cdRef,\n        ngZone,\n        context: (cdRef as EmbeddedViewRef<Type<any>>).context,\n      }),\n      resetContextObserver: this.resetContextObserver,\n      updateViewContextObserver: this.updateViewContextObserver,\n      configurableBehaviour: this.configurableBehaviour,\n    });\n    this.subscription = this.cdAware.subscribe();\n  }\n\n  createEmbeddedView() {\n    this.embeddedView = this.viewContainerRef.createEmbeddedView(\n      this.templateRef,\n      this.ViewContext\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.viewContainerRef.clear();\n  }\n}\n"]}