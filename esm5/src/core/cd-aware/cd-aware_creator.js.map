{"version":3,"file":"cd-aware_creator.js","sourceRoot":"ng://@ngrx/component/","sources":["src/core/cd-aware/cd-aware_creator.ts"],"names":[],"mappings":";;;;;AACA,OAAO,EAIL,OAAO,GAGR,MAAM,MAAM,CAAC;AACd,OAAO,EAAE,oBAAoB,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAC3E,OAAO,EAAE,iBAAiB,EAAE,MAAM,gBAAgB,CAAC;AACnD,OAAO,EAAE,yBAAyB,EAAE,MAAM,iCAAiC,CAAC;;;;AAE5E,sCAEC;;;IADC,qCAAmB;;;;;;AAGrB,6BAEC;;;IADC,uBAAqE;;;;;AAGvE,gCAIC;;;IAHC,6BAAa;;IACb,4BAAe;;IACf,2BAAyB;;;;;;AAG3B,MAAM,UAAU,SAAS,CAAC,GAAe;;QACjC,MAAM,GAA8B,yBAAyB,CACjE,GAAG,CAAC,MAAM,EACV,GAAG,CAAC,KAAK,CACV;IACD;;;IAAO,cAAM,OAAA,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,EAAnB,CAAmB,EAAC;AACnC,CAAC;;;;;;;;;;;;;AAWD,MAAM,UAAU,aAAa,CAAI,GAOhC;;QACO,kBAAkB,GAAG,IAAI,OAAO,EAEnC;;QACG,YAAY,GAEd,kBAAkB,CAAC,IAAI,CACzB,oBAAoB,EAAE;IACtB,qDAAqD;IACrD,GAAG;;;;IAAC,UAAC,CAAC,IAAK,OAAA,iBAAiB,CAAC,CAAC,CAAC,EAApB,CAAoB,EAAC,EAChC,GAAG;;;;IAAC,UAAC,CAAM;QACT,GAAG,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACjC,GAAG,CAAC,IAAI,EAAE,CAAC;IACb,CAAC,EAAC,EACF,GAAG;;;;IAAC,UAAA,MAAM;QACR,OAAA,MAAM,CAAC,IAAI,CACT,oBAAoB,EAAE,EACtB,GAAG,CAAC,GAAG,CAAC,yBAAyB,CAAC,CACnC;IAHD,CAGC,EACF,EACD,GAAG,CAAC,qBAAqB,EACzB,SAAS,EAAE,EACX,GAAG;;;IAAC,cAAM,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,EAAC,CACtB;IAED,OAAO,mBAAA;QACL,IAAI;;;;QAAJ,UAAK,KAAU;YACb,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC;QACD,SAAS;;;QAAT;YACE,OAAO,YAAY,CAAC,SAAS,EAAE,CAAC;QAClC,CAAC;KACF,EAAiC,CAAC;AACrC,CAAC","sourcesContent":["import { ChangeDetectorRef, NgZone } from '@angular/core';\nimport {\n  NextObserver,\n  Observable,\n  PartialObserver,\n  Subject,\n  Subscribable,\n  Subscription,\n} from 'rxjs';\nimport { distinctUntilChanged, map, switchAll, tap } from 'rxjs/operators';\nimport { toObservableValue } from '../projections';\nimport { getChangeDetectionHandler } from './get-change-detection-handling';\n\nexport interface CoalescingConfig {\n  optimized: boolean;\n}\n\nexport interface CdAware<U> extends Subscribable<U> {\n  next: (value: Observable<U> | Promise<U> | null | undefined) => void;\n}\n\nexport interface WorkConfig {\n  context: any;\n  ngZone: NgZone;\n  cdRef: ChangeDetectorRef;\n}\n\nexport function setUpWork(cfg: WorkConfig): () => void {\n  const render: (component?: any) => void = getChangeDetectionHandler(\n    cfg.ngZone,\n    cfg.cdRef\n  );\n  return () => render(cfg.context);\n}\n\n/**\n * class CdAware\n *\n * @description\n * This abstract class holds all the shared logic for the push pipe and the let directive\n * responsible for change detection\n * If you extend this class you need to implement how the update of the rendered value happens.\n * Also custom behaviour is something you need to implement in the extending class\n */\nexport function createCdAware<U>(cfg: {\n  work: () => void;\n  resetContextObserver: NextObserver<unknown>;\n  configurableBehaviour: (\n    o: Observable<Observable<U | null | undefined>>\n  ) => Observable<Observable<U | null | undefined>>;\n  updateViewContextObserver: PartialObserver<U | null | undefined>;\n}): CdAware<U | undefined | null> {\n  const observablesSubject = new Subject<\n    Observable<U> | Promise<U> | null | undefined\n  >();\n  const observables$: Observable<\n    U | undefined | null\n  > = observablesSubject.pipe(\n    distinctUntilChanged(),\n    // Try to convert it to values, throw if not possible\n    map((v) => toObservableValue(v)),\n    tap((v: any) => {\n      cfg.resetContextObserver.next(v);\n      cfg.work();\n    }),\n    map(value$ =>\n      value$.pipe(\n        distinctUntilChanged(),\n        tap(cfg.updateViewContextObserver)\n      )\n    ),\n    cfg.configurableBehaviour,\n    switchAll(),\n    tap(() => cfg.work())\n  );\n\n  return {\n    next(value: any): void {\n      observablesSubject.next(value);\n    },\n    subscribe(): Subscription {\n      return observables$.subscribe();\n    },\n  } as CdAware<U | undefined | null>;\n}\n"]}