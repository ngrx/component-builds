{"version":3,"file":"ngrx-component.js","sources":["ng://@ngrx/component/src/core/utils/get-global-this.ts","ng://@ngrx/component/src/core/utils/is-ivy.ts","ng://@ngrx/component/src/core/utils/has-zone.ts","ng://@ngrx/component/src/core/projections/toObservableValue.ts","ng://@ngrx/component/src/core/cd-aware/get-change-detection-handling.ts","ng://@ngrx/component/src/core/cd-aware/cd-aware_creator.ts","ng://@ngrx/component/src/push/push.pipe.ts","ng://@ngrx/component/src/let/let.directive.ts","ng://@ngrx/component/src/reactive-component.module.ts"],"sourcesContent":["/**\n * @description\n *\n * This function returns a reference to globalThis in the following environments:\n * - Browser\n * - SSR (Server Side Rendering)\n * - Tests\n *\n * The function can be just imported and used everywhere.\n *\n * ```ts\n * import { getGlobalThis } from `utils/get-global-this`;\n *\n * console.log(getGlobalThis());\n * ```\n */\nexport function getGlobalThis(): any {\n  return ((globalThis as any) || (self as any) || (window as any)) as any;\n}\n","import { getGlobalThis } from './get-global-this';\n\n/**\n * @description\n *\n * Determines if the application runs with ivy or not (ViewEngine)\n *\n * @usageNotes\n *\n * The function can be just imported and used everywhere.\n *\n * ```ts\n * import { isIvy } from `utils/is-ivy`;\n *\n * console.log(isIvy());  // true or false\n * ```\n *\n * The determination if an application runs with Ivy or not is done by following table:\n *\n * **Table for ng global presence in ViewEngine and Ivy for prod/dev modes**\n *\n *  | render   | ViewEngine | ViewEngine | Ivy       | Ivy       |\n *  | -------- | ---------- | ---------- | --------- | --------  |\n *  | mode     | prod       | dev        | prod      | dev       |\n *  | ng       | present    | present    | undefined | present   |\n *  | ng.probe | present    | present    | undefined | undefined |\n *\n *  > So for Ivy we need to make sure that ng is undefined or,\n *  > in case of dev environment, ng.probe is undefined\n *\n */\nexport function isIvy(): boolean {\n  const ng: any = getGlobalThis().ng;\n\n  // Is the global ng object is unavailable?\n  // ng === undefined in Ivy production mode\n  // View Engine has the ng object both in development mode and production mode.\n  return (\n    ng === undefined ||\n    // in case we are in dev mode in ivy\n    // `probe` property is available on ng object we use View Engine.\n    ng.probe === undefined\n  );\n}\n","import { NgZone } from '@angular/core';\n\n/**\n * @description\n *\n * Determines if the application uses `NgZone` or `NgNoopZone` as ngZone service instance.\n *\n * The function can be just imported and used everywhere.\n *\n * ```ts\n * import { hasZone } from `utils/has-zone`;\n *\n * console.log(hasZone());\n * ```\n */\nexport function hasZone(z: NgZone): boolean {\n  return z.constructor.name !== 'NoopNgZone';\n}\n","import { from, of, Observable, ObservableInput } from 'rxjs';\n\n/**\n * @description\n *\n * This operator ensures the passed value is of the right type for `CdAware`.\n * It takes `null`, `undefined` or `Observable<T>` and returns `Observable<null, undefined, T>`.\n * Every other value throws an error.\n *\n * ```ts\n * import { toObservableValue } from `projections/toObservableValue`;\n *\n * const toObservableValue()\n *  .pipe(switchAll())\n *  .subscribe((n) => console.log(n););\n * ```\n */\nexport function toObservableValue<T>(p: any): Observable<T | undefined | null> {\n  return p ? from(p) : of(p);\n}\n","import {\n  ChangeDetectorRef,\n  NgZone,\n  ɵdetectChanges as detectChanges,\n  ɵmarkDirty as markDirty,\n} from '@angular/core';\n\nimport { isIvy } from '../utils/is-ivy';\nimport { hasZone } from '../utils/has-zone';\n\nexport function getChangeDetectionHandler(\n  ngZone: NgZone,\n  cdRef: ChangeDetectorRef\n): <T>(component?: T) => void {\n  if (isIvy()) {\n    return hasZone(ngZone) ? markDirty : detectChanges;\n  } else {\n    return hasZone(ngZone)\n      ? cdRef.markForCheck.bind(cdRef)\n      : cdRef.detectChanges.bind(cdRef);\n  }\n}\n","import { ChangeDetectorRef, NgZone } from '@angular/core';\nimport {\n  NextObserver,\n  Observable,\n  PartialObserver,\n  Subject,\n  Subscribable,\n  Subscription,\n} from 'rxjs';\nimport { distinctUntilChanged, map, switchAll, tap } from 'rxjs/operators';\nimport { toObservableValue } from '../projections';\nimport { getChangeDetectionHandler } from './get-change-detection-handling';\n\nexport interface CoalescingConfig {\n  optimized: boolean;\n}\n\nexport interface CdAware<U> extends Subscribable<U> {\n  next: (value: Observable<U> | Promise<U> | null | undefined) => void;\n}\n\nexport interface WorkConfig {\n  context: any;\n  ngZone: NgZone;\n  cdRef: ChangeDetectorRef;\n}\n\nexport function setUpWork(cfg: WorkConfig): () => void {\n  const render: (component?: any) => void = getChangeDetectionHandler(\n    cfg.ngZone,\n    cfg.cdRef\n  );\n  return () => render(cfg.context);\n}\n\n/**\n * class CdAware\n *\n * @description\n * This abstract class holds all the shared logic for the push pipe and the let directive\n * responsible for change detection\n * If you extend this class you need to implement how the update of the rendered value happens.\n * Also custom behaviour is something you need to implement in the extending class\n */\nexport function createCdAware<U>(cfg: {\n  work: () => void;\n  resetContextObserver: NextObserver<unknown>;\n  configurableBehaviour: (\n    o: Observable<Observable<U | null | undefined>>\n  ) => Observable<Observable<U | null | undefined>>;\n  updateViewContextObserver: PartialObserver<U | null | undefined>;\n}): CdAware<U | undefined | null> {\n  const observablesSubject = new Subject<\n    Observable<U> | Promise<U> | null | undefined\n  >();\n  const observables$: Observable<\n    U | undefined | null\n  > = observablesSubject.pipe(\n    distinctUntilChanged(),\n    // Try to convert it to values, throw if not possible\n    map((v) => toObservableValue(v)),\n    tap((v: any) => {\n      cfg.resetContextObserver.next(v);\n      cfg.work();\n    }),\n    map(value$ =>\n      value$.pipe(\n        distinctUntilChanged(),\n        tap(cfg.updateViewContextObserver)\n      )\n    ),\n    cfg.configurableBehaviour,\n    switchAll(),\n    tap(() => cfg.work())\n  );\n\n  return {\n    next(value: any): void {\n      observablesSubject.next(value);\n    },\n    subscribe(): Subscription {\n      return observables$.subscribe();\n    },\n  } as CdAware<U | undefined | null>;\n}\n","import {\n  ChangeDetectorRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  Pipe,\n  PipeTransform,\n  Type,\n} from '@angular/core';\nimport {\n  NextObserver,\n  Observable,\n  PartialObserver,\n  Subject,\n  Unsubscribable,\n} from 'rxjs';\nimport { distinctUntilChanged, map, withLatestFrom } from 'rxjs/operators';\nimport {\n  CdAware,\n  CoalescingConfig as PushPipeConfig,\n  createCdAware,\n  setUpWork,\n} from '../core';\n\n/**\n * @Pipe PushPipe\n *\n * @description\n *\n * The `ngrxPush` pipe serves as a drop-in replacement for the `async` pipe.\n * It contains intelligent handling of change detection to enable us\n * running in zone-full as well as zone-less mode without any changes to the code.\n *\n * The current way of binding an observable to the view looks like that:\n *  ```html\n *  {{observable$ | async}}\n * <ng-container *ngIf=\"observable$ | async as o\">{{o}}</ng-container>\n * <component [value]=\"observable$ | async\"></component>\n * ```\n *\n * The problem is `async` pipe just marks the component and all its ancestors as dirty.\n * It needs zone.js microtask queue to exhaust until `ApplicationRef.tick` is called to render all dirty marked components.\n *\n * Heavy dynamic and interactive UIs suffer from zones change detection a lot and can\n * lean to bad performance or even unusable applications, but the `async` pipe does not work in zone-less mode.\n *\n * `ngrxPush` pipe solves that problem.\n *\n * Included Features:\n *  - Take observables or promises, retrieve their values and render the value to the template\n *  - Handling null and undefined values in a clean unified/structured way\n *  - Triggers change-detection differently if `zone.js` is present or not (`detectChanges` or `markForCheck`)\n *  - Distinct same values in a row to increase performance\n *  - Coalescing of change detection calls to boost performance\n *\n * @usageNotes\n *\n * `ngrxPush` pipe solves that problem. It can be used like shown here:\n * ```html\n * {{observable$ | ngrxPush}}\n * <ng-container *ngIf=\"observable$ | ngrxPush as o\">{{o}}</ng-container>\n * <component [value]=\"observable$ | ngrxPush\"></component>\n * ```\n *\n * @publicApi\n */\n@Pipe({ name: 'ngrxPush', pure: false })\nexport class PushPipe<S> implements PipeTransform, OnDestroy {\n  private renderedValue: S | null | undefined;\n\n  private readonly configSubject = new Subject<PushPipeConfig>();\n  private readonly config$ = this.configSubject\n    .asObservable()\n    .pipe(distinctUntilChanged());\n\n  private readonly subscription: Unsubscribable;\n  private readonly cdAware: CdAware<S | null | undefined>;\n  private readonly updateViewContextObserver: PartialObserver<\n    S | null | undefined\n  > = {\n    next: (value: S | null | undefined) => (this.renderedValue = value),\n  };\n  private readonly resetContextObserver: NextObserver<unknown> = {\n    next: (value: unknown) => (this.renderedValue = undefined),\n  };\n  private readonly configurableBehaviour = <T>(\n    o$: Observable<Observable<T>>\n  ): Observable<Observable<T>> =>\n    o$.pipe(\n      withLatestFrom(this.config$),\n      map(([value$, config]) => {\n        return value$.pipe();\n      })\n    );\n\n  constructor(cdRef: ChangeDetectorRef, ngZone: NgZone) {\n    this.cdAware = createCdAware<S>({\n      work: setUpWork({\n        ngZone,\n        cdRef,\n        context: (cdRef as EmbeddedViewRef<Type<any>>).context,\n      }),\n      updateViewContextObserver: this.updateViewContextObserver,\n      resetContextObserver: this.resetContextObserver,\n      configurableBehaviour: this.configurableBehaviour,\n    });\n    this.subscription = this.cdAware.subscribe();\n  }\n\n  transform(potentialObservable: null, config?: PushPipeConfig): null;\n  transform(potentialObservable: undefined, config?: PushPipeConfig): undefined;\n  transform(\n    potentialObservable: Observable<S> | Promise<S>,\n    config?: PushPipeConfig\n  ): S;\n  transform(\n    potentialObservable: Observable<S> | Promise<S> | null | undefined,\n    config: PushPipeConfig = { optimized: true }\n  ): S | null | undefined {\n    this.configSubject.next(config);\n    this.cdAware.next(potentialObservable);\n    return this.renderedValue;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  EmbeddedViewRef,\n  Input,\n  NgZone,\n  OnDestroy,\n  TemplateRef,\n  Type,\n  ViewContainerRef,\n} from '@angular/core';\n\nimport {\n  EMPTY,\n  NextObserver,\n  Observable,\n  PartialObserver,\n  ReplaySubject,\n  Unsubscribable,\n} from 'rxjs';\nimport {\n  catchError,\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport {\n  CdAware,\n  CoalescingConfig as NgRxLetConfig,\n  createCdAware,\n  setUpWork,\n} from '../core';\n\nexport interface LetViewContext<T> {\n  // to enable `let` syntax we have to use $implicit (var; let v = var)\n  $implicit?: T;\n  // to enable `as` syntax we have to assign the directives selector (var as v)\n  ngrxLet?: T;\n  // set context var complete to true (var$; let e = $error)\n  $error?: boolean;\n  // set context var complete to true (var$; let c = $complete)\n  $complete?: boolean;\n}\n\n/**\n * @Directive LetDirective\n *\n * @description\n *\n * The `*ngrxLet` directive serves a convenient way of binding observables to a view context (a dom element scope).\n * It also helps with several internal processing under the hood.\n *\n * The current way of binding an observable to the view looks like that:\n * ```html\n * <ng-container *ngIf=\"observableNumber$ as n\">\n * <app-number [number]=\"n\">\n * </app-number>\n * <app-number-special [number]=\"n\">\n * </app-number-special>\n * </ng-container>\n *  ```\n *\n *  The problem is `*ngIf` is also interfering with rendering and in case of a `0` the component would be hidden\n *\n * Included Features:\n * - binding is always present. (`*ngIf=\"truthy$\"`)\n * - it takes away the multiple usages of the `async` or `ngrxPush` pipe\n * - a unified/structured way of handling null and undefined\n * - triggers change-detection differently if `zone.js` is present or not (`ChangeDetectorRef.detectChanges` or `ChangeDetectorRef.markForCheck`)\n * - triggers change-detection differently if ViewEngine or Ivy is present (`ChangeDetectorRef.detectChanges` or `ɵdetectChanges`)\n * - distinct same values in a row (distinctUntilChanged operator),\n *\n * @usageNotes\n *\n * The `*ngrxLet` directive take over several things and makes it more convenient and save to work with streams in the template\n * `<ng-container *ngrxLet=\"observableNumber$ as c\"></ng-container>`\n *\n * ```html\n * <ng-container *ngrxLet=\"observableNumber$ as n\">\n * <app-number [number]=\"n\">\n * </app-number>\n * </ng-container>\n *\n * <ng-container *ngrxLet=\"observableNumber$; let n\">\n * <app-number [number]=\"n\">\n * </app-number>\n * </ng-container>\n * ```\n *\n * In addition to that it provides us information from the whole observable context.\n * We can track the observables:\n * - next value\n * - error value\n * - complete state\n *\n * ```html\n * <ng-container *ngrxLet=\"observableNumber$; let n; let e = $error, let c = $complete\">\n * <app-number [number]=\"n\"  *ngIf=\"!e && !c\">\n * </app-number>\n * <ng-container *ngIf=\"e\">\n * There is an error: {{e}}\n * </ng-container>\n * <ng-container *ngIf=\"c\">\n * Observable completed: {{c}}\n * </ng-container>\n * </ng-container>\n * ```\n *\n * @publicApi\n */\n@Directive({ selector: '[ngrxLet]' })\nexport class LetDirective<U> implements OnDestroy {\n  private embeddedView: any;\n  private readonly ViewContext: LetViewContext<U | undefined | null> = {\n    $implicit: undefined,\n    ngrxLet: undefined,\n    $error: false,\n    $complete: false,\n  };\n\n  private readonly configSubject = new ReplaySubject<NgRxLetConfig>();\n  private readonly config$ = this.configSubject.pipe(\n    filter(v => v !== undefined && v !== null),\n    distinctUntilChanged(),\n    startWith({ optimized: true })\n  );\n\n  protected readonly subscription: Unsubscribable;\n  private readonly cdAware: CdAware<U | null | undefined>;\n  private readonly resetContextObserver: NextObserver<unknown> = {\n    next: () => {\n      if (this.embeddedView) {\n        this.ViewContext.$implicit = undefined;\n        this.ViewContext.ngrxLet = undefined;\n        this.ViewContext.$error = false;\n        this.ViewContext.$complete = false;\n      }\n    },\n  };\n  private readonly updateViewContextObserver: PartialObserver<\n    U | null | undefined\n  > = {\n    next: (value: U | null | undefined) => {\n      if (!this.embeddedView) {\n        this.createEmbeddedView();\n      }\n      this.ViewContext.$implicit = value;\n      this.ViewContext.ngrxLet = value;\n    },\n    error: (error: Error) => {\n      if (!this.embeddedView) {\n        this.createEmbeddedView();\n      }\n      this.ViewContext.$error = true;\n    },\n    complete: () => {\n      if (!this.embeddedView) {\n        this.createEmbeddedView();\n      }\n      this.ViewContext.$complete = true;\n    },\n  };\n\n  static ngTemplateContextGuard<U>(\n    dir: LetDirective<U>,\n    ctx: unknown\n  ): ctx is LetViewContext<U> {\n    return true;\n  }\n\n  private readonly configurableBehaviour = <T>(\n    o$: Observable<Observable<T>>\n  ): Observable<Observable<T>> =>\n    o$.pipe(\n      withLatestFrom(this.config$),\n      map(([value$, config]) => {\n        return value$.pipe(catchError(e => EMPTY));\n      })\n    );\n\n  @Input()\n  set ngrxLet(\n    potentialObservable: Observable<U> | Promise<U> | null | undefined\n  ) {\n    this.cdAware.next(potentialObservable);\n  }\n\n  @Input()\n  set ngrxLetConfig(config: NgRxLetConfig) {\n    this.configSubject.next(config || { optimized: true });\n  }\n\n  constructor(\n    cdRef: ChangeDetectorRef,\n    ngZone: NgZone,\n    private readonly templateRef: TemplateRef<LetViewContext<U>>,\n    private readonly viewContainerRef: ViewContainerRef\n  ) {\n    this.cdAware = createCdAware<U>({\n      work: setUpWork({\n        cdRef,\n        ngZone,\n        context: (cdRef as EmbeddedViewRef<Type<any>>).context,\n      }),\n      resetContextObserver: this.resetContextObserver,\n      updateViewContextObserver: this.updateViewContextObserver,\n      configurableBehaviour: this.configurableBehaviour,\n    });\n    this.subscription = this.cdAware.subscribe();\n  }\n\n  createEmbeddedView() {\n    this.embeddedView = this.viewContainerRef.createEmbeddedView(\n      this.templateRef,\n      this.ViewContext\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.viewContainerRef.clear();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { LetDirective } from './let';\nimport { PushPipe } from './push';\n\nconst DECLARATIONS = [LetDirective, PushPipe];\nconst EXPORTS = [DECLARATIONS];\n\n@NgModule({\n  declarations: [DECLARATIONS],\n  exports: [EXPORTS],\n})\nexport class ReactiveComponentModule {}\n"],"names":["markDirty","detectChanges"],"mappings":"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"}