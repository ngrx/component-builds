{"version":3,"sources":["../../../../modules/component/src/core/cd-aware/creator_render.ts","../../../../modules/component/src/core/utils/has-zone.ts","../../../../modules/component/src/core/cd-aware/cd-aware_creator.ts","../../../../modules/component/src/push/push.pipe.ts","../../../../modules/component/src/let/let.directive.ts","../../../../modules/component/src/reactive-component.module.ts"],"names":["createRender","config","ngZone","NgZone","cdRef","markForCheck","detectChanges","createCdAware","cfg","potentialObservablesSubject","Subject","rendering$","pipe","distinctUntilChanged","switchMap","observable$","updateViewContextObserver","next","render","EMPTY","resetContextObserver","tap","catchError","e","console","error","nextPotentialObservable","value","subscribe","PushPipe","_this","this","renderedValue","undefined","cdAware","subscription","prototype","transform","potentialObservable","ngOnDestroy","unsubscribe","Pipe","args","name","pure","ChangeDetectorRef","LetDirective","templateRef","viewContainerRef","ViewContext","$implicit","ngrxLet","$error","$complete","embeddedView","createEmbeddedView","complete","ngTemplateContextGuard","dir","ctx","Object","defineProperty","clear","Directive","selector","TemplateRef","ViewContainerRef","Input","DECLARATIONS","EXPORTS","NgModule","declarations","exports"],"mappings":"8YAQgBA,EAAgBC,GAS9B,OARA,WACcA,EAAOC,kBCMDC,EAAAA,ODLhBF,EAAOG,MAAMC,eAEbJ,EAAOG,MAAME,0BEgBHC,EAAiBC,OAKzBC,EAA8B,IAAIC,EAAAA,QAOlCC,EAJ2BF,EAA4BG,KAC3DC,EAAAA,wBAG0CD,KAE1CE,EAAAA,WAAS,SAAEC,GAIT,OAAmB,MAAfA,GAEFP,EAAIQ,0BAA0BC,KAAI,GAElCT,EAAIU,SAEGC,EAAAA,QAKTX,EAAIY,qBAAqBH,OACzBT,EAAIU,SAEGH,EAAYH,KACjBC,EAAAA,uBACAQ,EAAAA,IAAIb,EAAIQ,2BACRK,EAAAA,KAAG,WAAO,OAAAb,EAAIU,YACdI,EAAAA,YAAU,SAAEC,GAEV,OADAC,QAAQC,MAAMF,GACPJ,EAAAA,eAMf,MAAA,CACEO,wBAAuB,SAACC,GACtBlB,EAA4BQ,KAAKU,IAEnCC,UAAS,WACP,OAAOjB,EAAWiB,+BCVtB,SAAAC,EAAYzB,EAA0BF,GAAtC,IAAA4B,EAAAC,KATiBA,KAAAX,qBAA2C,CAC1DH,KAAI,WAAQ,OAACa,EAAKE,mBAAgBC,IAEnBF,KAAAf,0BAEb,CACFC,KAAI,SAAGU,GAAgC,OAACG,EAAKE,cAAgBL,IAI7DI,KAAKG,QAAU3B,EAAiB,CAC9BW,OAAQlB,EAAa,CAAEI,MAAKA,EAAEF,OAAMA,IACpCc,0BAA2Be,KAAKf,0BAChCI,qBAAsBW,KAAKX,uBAE7BW,KAAKI,aAAeJ,KAAKG,QAAQN,mBAMnCC,EAAAO,UAAAC,UAAA,SACEC,GAGA,OADAP,KAAKG,QAAQR,wBAAwBY,GAC9BP,KAAkB,eAG3BF,EAAAO,UAAAG,YAAA,WACER,KAAKI,aAAaK,wCAnCrBC,EAAAA,KAAIC,KAAA,CAAC,CAAEC,KAAM,WAAYC,MAAM,+CApD9BC,EAAAA,yBACA1C,EAAAA,2BCsJA,SAAA2C,EACE1C,EACAF,EACiB6C,EACAC,GAJnB,IAAAlB,EAAAC,KAGmBA,KAAAgB,YAAAA,EACAhB,KAAAiB,iBAAAA,EA/DFjB,KAAAkB,YAAoD,CACnEC,eAAWjB,EACXkB,aAASlB,EACTmB,QAAQ,EACRC,WAAW,GAKItB,KAAAX,qBAA2C,CAC1DH,KAAI,WAEEa,EAAKwB,eACPxB,EAAKmB,YAAYC,eAAYjB,EAC7BH,EAAKmB,YAAYE,aAAUlB,EAC3BH,EAAKmB,YAAYG,QAAS,EAC1BtB,EAAKmB,YAAYI,WAAY,KAIlBtB,KAAAf,0BAA4D,CAC3EC,KAAI,SAAGU,GAEAG,EAAKwB,cACRxB,EAAKyB,qBAEPzB,EAAKmB,YAAYC,UAAYvB,EAC7BG,EAAKmB,YAAYE,QAAUxB,GAE7BF,MAAK,SAAGA,GAEDK,EAAKwB,cACRxB,EAAKyB,qBAEPzB,EAAKmB,YAAYG,QAAS,GAE5BI,SAAQ,WAED1B,EAAKwB,cACRxB,EAAKyB,qBAEPzB,EAAKmB,YAAYI,WAAY,IAwB/BtB,KAAKG,QAAU3B,EAAiB,CAC9BW,OAAQlB,EAAa,CAAEI,MAAKA,EAAEF,OAAMA,IACpCkB,qBAAsBW,KAAKX,qBAC3BJ,0BAA2Be,KAAKf,4BAElCe,KAAKI,aAAeJ,KAAKG,QAAQN,mBAzB5BkB,EAAAW,uBAAP,SACEC,EACAC,GAEA,OAAO,GAKTC,OAAAC,eACIf,EAAAV,UAAA,UAAO,KADX,SACYE,GACVP,KAAKG,QAAQR,wBAAwBY,oCAiBvCQ,EAAAV,UAAAmB,mBAAA,WACExB,KAAKuB,aAAevB,KAAKiB,iBAAiBO,mBACxCxB,KAAKgB,YACLhB,KAAKkB,cAITH,EAAAV,UAAAG,YAAA,WACER,KAAKI,aAAaK,cAClBT,KAAKiB,iBAAiBc,kCArFzBC,EAAAA,UAASrB,KAAA,CAAC,CAAEsB,SAAU,yDAzFrBnB,EAAAA,yBAGA1C,EAAAA,cAEA8D,EAAAA,mBACAC,EAAAA,qDA4ICC,EAAAA,aC/IGC,EAAe,CAACtB,EAAcjB,GAC9BwC,EAAU,CAACD,KAMjB,iCAJCE,EAAAA,SAAQ5B,KAAA,CAAC,CACR6B,aAAc,CAACH,GACfI,QAAS,CAACH","sourcesContent":["import { ChangeDetectorRef, NgZone } from '@angular/core';\nimport { hasZone } from '../utils';\n\nexport interface RenderConfig {\n  ngZone: NgZone;\n  cdRef: ChangeDetectorRef;\n}\n\nexport function createRender<T>(config: RenderConfig): () => void {\n  function render() {\n    if (hasZone(config.ngZone)) {\n      config.cdRef.markForCheck();\n    } else {\n      config.cdRef.detectChanges();\n    }\n  }\n\n  return render;\n}\n","import { NgZone } from '@angular/core';\n\n/**\n * @description\n *\n * Determines if the application uses `NgZone` or `NgNoopZone` as ngZone service instance.\n *\n * The function can be just imported and used everywhere.\n *\n * ```ts\n * import { hasZone } from `utils/has-zone`;\n *\n * console.log(hasZone());\n * ```\n */\nexport function hasZone(z: NgZone): boolean {\n  return z instanceof NgZone;\n}\n","import {\n  EMPTY,\n  NextObserver,\n  Observable,\n  Subject,\n  Subscribable,\n  Subscription,\n} from 'rxjs';\nimport {\n  catchError,\n  distinctUntilChanged,\n  filter,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\nexport interface CdAware<U> extends Subscribable<U> {\n  nextPotentialObservable: (value: any) => void;\n}\n\n/**\n * class CdAware\n *\n * @description\n * This abstract class holds all the shared logic for the push pipe and the let directive\n * responsible for change detection\n * If you extend this class you need to implement how the update of the rendered value happens.\n * Also custom behaviour is something you need to implement in the extending class\n */\nexport function createCdAware<U>(cfg: {\n  render: () => void;\n  resetContextObserver: NextObserver<void>;\n  updateViewContextObserver: NextObserver<U | undefined | null>;\n}): CdAware<U | undefined | null> {\n  const potentialObservablesSubject = new Subject<\n    Observable<U> | undefined | null\n  >();\n  const observablesFromTemplate$ = potentialObservablesSubject.pipe(\n    distinctUntilChanged()\n  );\n\n  const rendering$ = observablesFromTemplate$.pipe(\n    // Compose the observables from the template and the strategy\n    switchMap((observable$) => {\n      // If the passed observable is:\n      // - undefined - No value set\n      // - null - null passed directly or no value set over `async` pipe\n      if (observable$ == null) {\n        // Update the value to render_creator with null/undefined\n        cfg.updateViewContextObserver.next(observable$ as any);\n        // Render the view\n        cfg.render();\n        // Stop further processing\n        return EMPTY;\n      }\n\n      // If a new Observable arrives, reset the value to render_creator\n      // We do this because we don't know when the next value arrives and want to get rid of the old value\n      cfg.resetContextObserver.next();\n      cfg.render();\n\n      return observable$.pipe(\n        distinctUntilChanged(),\n        tap(cfg.updateViewContextObserver),\n        tap(() => cfg.render()),\n        catchError((e) => {\n          console.error(e);\n          return EMPTY;\n        })\n      );\n    })\n  );\n\n  return {\n    nextPotentialObservable(value: Observable<U> | undefined | null): void {\n      potentialObservablesSubject.next(value);\n    },\n    subscribe(): Subscription {\n      return rendering$.subscribe();\n    },\n  } as CdAware<U | undefined | null>;\n}\n","import {\n  ChangeDetectorRef,\n  NgZone,\n  OnDestroy,\n  Pipe,\n  PipeTransform,\n} from '@angular/core';\nimport { NextObserver, ObservableInput, Unsubscribable } from 'rxjs';\nimport { CdAware, createCdAware, createRender } from '../core';\n\n/**\n * @Pipe PushPipe\n *\n * @description\n *\n * The `ngrxPush` pipe serves as a drop-in replacement for the `async` pipe.\n * It contains intelligent handling of change detection to enable us\n * running in zone-full as well as zone-less mode without any changes to the code.\n *\n * The current way of binding an observable to the view looks like that:\n *  ```html\n *  {{observable$ | async}}\n * <ng-container *ngIf=\"observable$ | async as o\">{{o}}</ng-container>\n * <component [value]=\"observable$ | async\"></component>\n * ```\n *\n * The problem is `async` pipe just marks the component and all its ancestors as dirty.\n * It needs zone.js microtask queue to exhaust until `ApplicationRef.tick` is called to render_creator all dirty marked\n *     components.\n *\n * Heavy dynamic and interactive UIs suffer from zones change detection a lot and can\n * lean to bad performance or even unusable applications, but the `async` pipe does not work in zone-less mode.\n *\n * `ngrxPush` pipe solves that problem.\n *\n * Included Features:\n *  - Take observables or promises, retrieve their values and render_creator the value to the template\n *  - Handling null and undefined values in a clean unified/structured way\n *  - Triggers change-detection differently if `zone.js` is present or not (`detectChanges` or `markForCheck`)\n *  - Distinct same values in a row to increase performance\n *  - Coalescing of change detection calls to boost performance\n *\n * @usageNotes\n *\n * `ngrxPush` pipe solves that problem. It can be used like shown here:\n * ```html\n * {{observable$ | ngrxPush}}\n * <ng-container *ngIf=\"observable$ | ngrxPush as o\">{{o}}</ng-container>\n * <component [value]=\"observable$ | ngrxPush\"></component>\n * ```\n *\n * @publicApi\n */\n@Pipe({ name: 'ngrxPush', pure: false })\nexport class PushPipe<S> implements PipeTransform, OnDestroy {\n  private renderedValue: S | null | undefined;\n\n  private readonly subscription: Unsubscribable;\n  private readonly cdAware: CdAware<S | null | undefined>;\n  private readonly resetContextObserver: NextObserver<void> = {\n    next: () => (this.renderedValue = undefined),\n  };\n  private readonly updateViewContextObserver: NextObserver<\n    S | null | undefined\n  > = {\n    next: (value: S | null | undefined) => (this.renderedValue = value),\n  };\n\n  constructor(cdRef: ChangeDetectorRef, ngZone: NgZone) {\n    this.cdAware = createCdAware<S>({\n      render: createRender({ cdRef, ngZone }),\n      updateViewContextObserver: this.updateViewContextObserver,\n      resetContextObserver: this.resetContextObserver,\n    });\n    this.subscription = this.cdAware.subscribe();\n  }\n\n  transform<T>(potentialObservable: null): null;\n  transform<T>(potentialObservable: undefined): undefined;\n  transform<T>(potentialObservable: ObservableInput<T>): T;\n  transform<T>(\n    potentialObservable: ObservableInput<T> | null | undefined\n  ): T | null | undefined {\n    this.cdAware.nextPotentialObservable(potentialObservable);\n    return this.renderedValue as any;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  Input,\n  NgZone,\n  OnDestroy,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\n\nimport { NextObserver, ObservableInput, Observer, Unsubscribable } from 'rxjs';\nimport { CdAware, createCdAware, createRender } from '../core';\n\nexport interface LetViewContext<T> {\n  // to enable `let` syntax we have to use $implicit (var; let v = var)\n  $implicit?: T;\n  // to enable `as` syntax we have to assign the directives selector (var as v)\n  ngrxLet?: T;\n  // set context var complete to true (var$; let e = $error)\n  $error?: boolean;\n  // set context var complete to true (var$; let c = $complete)\n  $complete?: boolean;\n}\n\n/**\n * @Directive LetDirective\n *\n * @description\n *\n * The `*ngrxLet` directive serves a convenient way of binding observables to a view context (a dom element scope).\n * It also helps with several internal processing under the hood.\n *\n * The current way of binding an observable to the view looks like that:\n * ```html\n * <ng-container *ngIf=\"observableNumber$ as n\">\n * <app-number [number]=\"n\">\n * </app-number>\n * <app-number-special [number]=\"n\">\n * </app-number-special>\n * </ng-container>\n *  ```\n *\n *  The problem is `*ngIf` is also interfering with rendering and in case of a `0` the component would be hidden\n *\n * Included Features:\n * - binding is always present. (`*ngIf=\"truthy$\"`)\n * - it takes away the multiple usages of the `async` or `ngrxPush` pipe\n * - a unified/structured way of handling null and undefined\n * - triggers change-detection differently if `zone.js` is present or not (`ChangeDetectorRef.detectChanges` or `ChangeDetectorRef.markForCheck`)\n * - triggers change-detection differently if ViewEngine or Ivy is present (`ChangeDetectorRef.detectChanges` or `ɵdetectChanges`)\n * - distinct same values in a row (distinctUntilChanged operator),\n *\n * @usageNotes\n *\n * The `*ngrxLet` directive take over several things and makes it more convenient and save to work with streams in the template\n * `<ng-container *ngrxLet=\"observableNumber$ as c\"></ng-container>`\n *\n * ```html\n * <ng-container *ngrxLet=\"observableNumber$ as n\">\n * <app-number [number]=\"n\">\n * </app-number>\n * </ng-container>\n *\n * <ng-container *ngrxLet=\"observableNumber$; let n\">\n * <app-number [number]=\"n\">\n * </app-number>\n * </ng-container>\n * ```\n *\n * In addition to that it provides us information from the whole observable context.\n * We can track the observables:\n * - next value\n * - error value\n * - complete state\n *\n * ```html\n * <ng-container *ngrxLet=\"observableNumber$; let n; let e = $error, let c = $complete\">\n * <app-number [number]=\"n\"  *ngIf=\"!e && !c\">\n * </app-number>\n * <ng-container *ngIf=\"e\">\n * There is an error: {{e}}\n * </ng-container>\n * <ng-container *ngIf=\"c\">\n * Observable completed: {{c}}\n * </ng-container>\n * </ng-container>\n * ```\n *\n * @publicApi\n */\n@Directive({ selector: '[ngrxLet]' })\nexport class LetDirective<U> implements OnDestroy {\n  private embeddedView: any;\n  private readonly ViewContext: LetViewContext<U | undefined | null> = {\n    $implicit: undefined,\n    ngrxLet: undefined,\n    $error: false,\n    $complete: false,\n  };\n\n  protected readonly subscription: Unsubscribable;\n  private readonly cdAware: CdAware<U | null | undefined>;\n  private readonly resetContextObserver: NextObserver<void> = {\n    next: () => {\n      // if not initialized no need to set undefined\n      if (this.embeddedView) {\n        this.ViewContext.$implicit = undefined;\n        this.ViewContext.ngrxLet = undefined;\n        this.ViewContext.$error = false;\n        this.ViewContext.$complete = false;\n      }\n    },\n  };\n  private readonly updateViewContextObserver: Observer<U | null | undefined> = {\n    next: (value: U | null | undefined) => {\n      // to have init lazy\n      if (!this.embeddedView) {\n        this.createEmbeddedView();\n      }\n      this.ViewContext.$implicit = value;\n      this.ViewContext.ngrxLet = value;\n    },\n    error: (error: Error) => {\n      // to have init lazy\n      if (!this.embeddedView) {\n        this.createEmbeddedView();\n      }\n      this.ViewContext.$error = true;\n    },\n    complete: () => {\n      // to have init lazy\n      if (!this.embeddedView) {\n        this.createEmbeddedView();\n      }\n      this.ViewContext.$complete = true;\n    },\n  };\n\n  static ngTemplateContextGuard<U>(\n    dir: LetDirective<U>,\n    ctx: unknown | null | undefined\n  ): ctx is LetViewContext<U> {\n    return true;\n  }\n\n  static ngTemplateGuard_ngrxLet: 'binding';\n\n  @Input()\n  set ngrxLet(potentialObservable: ObservableInput<U> | null | undefined) {\n    this.cdAware.nextPotentialObservable(potentialObservable);\n  }\n\n  constructor(\n    cdRef: ChangeDetectorRef,\n    ngZone: NgZone,\n    private readonly templateRef: TemplateRef<LetViewContext<U>>,\n    private readonly viewContainerRef: ViewContainerRef\n  ) {\n    this.cdAware = createCdAware<U>({\n      render: createRender({ cdRef, ngZone }),\n      resetContextObserver: this.resetContextObserver,\n      updateViewContextObserver: this.updateViewContextObserver,\n    });\n    this.subscription = this.cdAware.subscribe();\n  }\n\n  createEmbeddedView() {\n    this.embeddedView = this.viewContainerRef.createEmbeddedView(\n      this.templateRef,\n      this.ViewContext\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.viewContainerRef.clear();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { LetDirective } from './let';\nimport { PushPipe } from './push';\n\nconst DECLARATIONS = [LetDirective, PushPipe];\nconst EXPORTS = [DECLARATIONS];\n\n@NgModule({\n  declarations: [DECLARATIONS],\n  exports: [EXPORTS],\n})\nexport class ReactiveComponentModule {}\n"]}