{"version":3,"file":"component.js","sources":["../../../../../../modules/component/src/core/utils/get-global-this.ts","../../../../../../modules/component/src/core/utils/is-ivy.ts","../../../../../../modules/component/src/core/utils/has-zone.ts","../../../../../../modules/component/src/core/utils/get-change-detection-handling.ts","../../../../../../modules/component/src/core/projections/toObservableValue.ts","../../../../../../modules/component/src/core/cd-aware.abstract.ts","../../../../../../modules/component/src/push/push.pipe.ts","../../../../../../modules/component/src/let/let.directive.ts","../../../../../../modules/component/src/reactive-component.module.ts","../../../../../../modules/component/component.ts"],"sourcesContent":["// Returns a reference to global thin\n// - Browser\n// - SSR\n// - Tests\nexport function getGlobalThis(): any {\n  return ((globalThis as any) || (self as any) || (window as any)) as any;\n}\n","import { getGlobalThis } from './get-global-this';\n\n// Table for ng global presence in ViewEngine and Ivy for prod/dev modes:\n//\n// | render     |  ViewEngine    |  ViewEngine    |      Ivy          |      Ivy          |\n// | mode       |     prod       |      dev       |      prod         |      dev          |\n// | ng         |     present    |     present    |     undefined     |     present       |\n// | ng.probe   |     present    |     present    |     undefined     |     undefined     |\n//\n// So for Ivy we need to make sure that ng is undefined or,\n// in case of dev environment, ng.probe is undefined\n\nexport function isIvy(): boolean {\n  const ng: any = getGlobalThis().ng;\n\n  // Is the global ng object is unavailable?\n  // ng === undefined in Ivy production mode\n  // View Engine has the ng object both in development mode and production mode.\n  return (\n    ng === undefined ||\n    // in case we are in dev mode in ivy\n    // `probe` property is available on ng object we use View Engine.\n    ng.probe === undefined\n  );\n}\n","import { NgZone } from '@angular/core';\n\nexport function hasZone(z: NgZone): boolean {\n  return z.constructor.name !== 'NoopNgZone';\n}\n","import {\n  ChangeDetectorRef,\n  NgZone,\n  ÉµdetectChanges as detectChanges,\n  ÉµmarkDirty as markDirty,\n} from '@angular/core';\n\nimport { isIvy } from './is-ivy';\nimport { hasZone } from './has-zone';\n\nexport function getChangeDetectionHandler(\n  ngZone: NgZone,\n  cdRef: ChangeDetectorRef\n): <T>(component?: T) => void {\n  if (isIvy()) {\n    return hasZone(ngZone) ? markDirty : detectChanges;\n  } else {\n    return hasZone(ngZone)\n      ? cdRef.markForCheck.bind(cdRef)\n      : cdRef.detectChanges.bind(cdRef);\n  }\n}\n\nexport function getDetectChanges(\n  ngZone: NgZone,\n  cdRef: ChangeDetectorRef\n): <T>(component?: T) => void {\n  if (isIvy()) {\n    return !hasZone(ngZone) ? detectChanges : markDirty;\n  } else {\n    return hasZone(ngZone)\n      ? cdRef.markForCheck.bind(cdRef)\n      : cdRef.detectChanges.bind(cdRef);\n  }\n}\n","import { from, of, Observable, ObservableInput } from 'rxjs';\n\nexport function toObservableValue<T>(\n  p: ObservableInput<T> | undefined | null\n): Observable<T | undefined | null> {\n  return p == null ? of(p) : from(p);\n}\n","import { ChangeDetectorRef, NgZone } from '@angular/core';\nimport { getChangeDetectionHandler } from './utils';\nimport {\n  NextObserver,\n  Observable,\n  PartialObserver,\n  Subject,\n  Subscribable,\n  Subscription,\n} from 'rxjs';\nimport { distinctUntilChanged, map, switchAll, tap } from 'rxjs/operators';\nimport { toObservableValue } from './projections';\n\nexport interface CoalescingConfig {\n  optimized: boolean;\n}\n\nexport interface CdAware<U> extends Subscribable<U> {\n  next: (value: Observable<U> | Promise<U> | null | undefined) => void;\n}\n\nexport interface WorkConfig {\n  context: any;\n  ngZone: NgZone;\n  cdRef: ChangeDetectorRef;\n}\n\nexport function setUpWork(cfg: WorkConfig): () => void {\n  const render: (component?: any) => void = getChangeDetectionHandler(\n    cfg.ngZone,\n    cfg.cdRef\n  );\n  return () => render(cfg.context);\n}\n\n/**\n * class CdAware\n *\n * @description\n * This abstract class holds all the shared logic for the push pipe and the let directive\n * responsible for change detection\n * If you extend this class you need to implement how the update of the rendered value happens.\n * Also custom behaviour is something you need to implement in the extending class\n */\nexport function createCdAware<U>(cfg: {\n  work: () => void;\n  resetContextObserver: NextObserver<unknown>;\n  configurableBehaviour: (\n    o: Observable<Observable<U | null | undefined>>\n  ) => Observable<Observable<U | null | undefined>>;\n  updateViewContextObserver: PartialObserver<U | null | undefined>;\n}): CdAware<U | undefined | null> {\n  const observablesSubject = new Subject<\n    Observable<U> | Promise<U> | null | undefined\n  >();\n  // We have to defer the setup of observables$ until subscription as getConfigurableBehaviour is defined in the\n  // extending class. So getConfigurableBehaviour is not available in the abstract layer\n  const observables$: Observable<\n    U | undefined | null\n  > = observablesSubject.pipe(\n    // Ignore potential observables of the same instances\n    distinctUntilChanged(),\n    // Try to convert it to values, throw if not possible\n    map(toObservableValue),\n    tap((v: any) => {\n      cfg.resetContextObserver.next(v);\n      cfg.work();\n    }),\n    map(value$ =>\n      value$.pipe(distinctUntilChanged(), tap(cfg.updateViewContextObserver))\n    ),\n    // e.g. coalescing\n    cfg.configurableBehaviour,\n    // Unsubscribe from previous observables\n    // Then flatten the latest internal observables into the output\n    // @NOTICE applied behaviour (on the values, not the observable) will fire here\n    switchAll(),\n    tap(() => cfg.work())\n  );\n\n  return {\n    next(value: any): void {\n      observablesSubject.next(value);\n    },\n    subscribe(): Subscription {\n      return observables$.subscribe();\n    },\n  } as CdAware<U | undefined | null>;\n}\n","import {\n  ChangeDetectorRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  Pipe,\n  PipeTransform,\n  Type,\n} from '@angular/core';\nimport {\n  NextObserver,\n  Observable,\n  PartialObserver,\n  Subject,\n  Unsubscribable,\n} from 'rxjs';\nimport { distinctUntilChanged, map, withLatestFrom } from 'rxjs/operators';\nimport {\n  CdAware,\n  CoalescingConfig as PushPipeConfig,\n  createCdAware,\n  setUpWork,\n} from '../core';\n\n/**\n * @Pipe PushPipe\n * @description\n *\n * The `ngrxPush` pipe serves as a drop-in replacement for the `async` pipe.\n * It contains intelligent handling of change detection to enable us\n * running in zone-full as well as zone-less mode without any changes to the code.\n *\n * The current way of binding an observable to the view looks like that:\n *  ```html\n *  {{observable$ | async}}\n * <ng-container *ngIf=\"observable$ | async as o\">{{o}}</ng-container>\n * <component [value]=\"observable$ | async\"></component>\n * ```\n *\n * The problem is `async` pipe just marks the component and all its ancestors as dirty.\n * It needs zone.js microtask queue to exhaust until `ApplicationRef.tick` is called to render all dirty marked components.\n *\n * Heavy dynamic and interactive UIs suffer from zones change detection a lot and can\n * lean to bad performance or even unusable applications, but the `async` pipe does not work in zone-less mode.\n *\n * `ngrxPush` pipe solves that problem.\n *\n * Included Features:\n *  - Take observables or promises, retrieve their values and render the value to the template\n *  - Handling null and undefined values in a clean unified/structured way\n *  - Triggers change-detection differently if `zone.js` is present or not (`detectChanges` or `markForCheck`)\n *  - Distinct same values in a row to increase performance\n *  - Coalescing of change detection calls to boost performance\n *\n * @usageNotes\n *\n * ### Examples\n *\n * `ngrxPush` pipe solves that problem. It can be used like shown here:\n * ```html\n * {{observable$ | ngrxPush}}\n * <ng-container *ngIf=\"observable$ | ngrxPush as o\">{{o}}</ng-container>\n * <component [value]=\"observable$ | ngrxPush\"></component>\n * ```\n *\n * @publicApi\n */\n@Pipe({ name: 'ngrxPush', pure: false })\nexport class PushPipe<S> implements PipeTransform, OnDestroy {\n  private renderedValue: S | null | undefined;\n\n  private readonly configSubject = new Subject<PushPipeConfig>();\n  private readonly config$ = this.configSubject\n    .asObservable()\n    .pipe(distinctUntilChanged());\n\n  private readonly subscription: Unsubscribable;\n  private readonly cdAware: CdAware<S | null | undefined>;\n  private readonly updateViewContextObserver: PartialObserver<\n    S | null | undefined\n  > = {\n    // assign value that will get returned from the transform function on the next change detection\n    next: (value: S | null | undefined) => (this.renderedValue = value),\n  };\n  private readonly resetContextObserver: NextObserver<unknown> = {\n    next: (value: unknown) => (this.renderedValue = undefined),\n  };\n  private readonly configurableBehaviour = <T>(\n    o$: Observable<Observable<T>>\n  ): Observable<Observable<T>> =>\n    o$.pipe(\n      withLatestFrom(this.config$),\n      map(([value$, config]) => {\n        // As discussed with Brandon we keep it here\n        // because in the beta we implement configuration behavior here\n        return value$.pipe();\n      })\n    );\n\n  constructor(cdRef: ChangeDetectorRef, ngZone: NgZone) {\n    this.cdAware = createCdAware<S>({\n      work: setUpWork({\n        ngZone,\n        cdRef,\n        context: (cdRef as EmbeddedViewRef<Type<any>>).context,\n      }),\n      updateViewContextObserver: this.updateViewContextObserver,\n      resetContextObserver: this.resetContextObserver,\n      configurableBehaviour: this.configurableBehaviour,\n    });\n    this.subscription = this.cdAware.subscribe();\n  }\n\n  transform(potentialObservable: null, config?: PushPipeConfig): null;\n  transform(potentialObservable: undefined, config?: PushPipeConfig): undefined;\n  transform(\n    potentialObservable: Observable<S> | Promise<S>,\n    config?: PushPipeConfig\n  ): S;\n  transform(\n    potentialObservable: Observable<S> | Promise<S> | null | undefined,\n    config: PushPipeConfig = { optimized: true }\n  ): S | null | undefined {\n    this.configSubject.next(config);\n    this.cdAware.next(potentialObservable);\n    return this.renderedValue;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  EmbeddedViewRef,\n  Input,\n  NgZone,\n  OnDestroy,\n  TemplateRef,\n  Type,\n  ViewContainerRef,\n} from '@angular/core';\n\nimport {\n  EMPTY,\n  NextObserver,\n  Observable,\n  PartialObserver,\n  ReplaySubject,\n  Unsubscribable,\n} from 'rxjs';\nimport {\n  catchError,\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport {\n  CdAware,\n  CoalescingConfig as NgRxLetConfig,\n  createCdAware,\n  setUpWork,\n} from '../core';\n\nexport interface LetViewContext<T> {\n  // to enable `let` syntax we have to use $implicit (var; let v = var)\n  $implicit?: T;\n  // to enable `as` syntax we have to assign the directives selector (var as v)\n  ngrxLet?: T;\n  // set context var complete to true (var$; let v = $error)\n  $error?: boolean;\n  // set context var complete to true (var$; let v = $complete)\n  $complete?: boolean;\n}\n\n/**\n * @Directive LetDirective\n *\n * @description\n *\n * The `*ngrxLet` directive serves a convenient way of binding observables to a view context (a dom element scope).\n * It also helps with several internal processing under the hood.\n *\n * The current way of binding an observable to the view looks like that:\n * ```html\n * <ng-container *ngIf=\"observableNumber$ as n\">\n * <app-number [number]=\"n\">\n * </app-number>\n * <app-number-special [number]=\"n\">\n * </app-number-special>\n * </ng-container>\n *  ```\n *\n *  The problem is `*ngIf` is also interfering with rendering and in case of a `0` the component would be hidden\n *\n * Included Features:\n * - binding is always present. (`*ngIf=\"truthy$\"`)\n * - it takes away the multiple usages of the `async` or `ngrxPush` pipe\n * - a unified/structured way of handling null and undefined\n * - triggers change-detection differently if `zone.js` is present or not (`ChangeDetectorRef.detectChanges` or `ChangeDetectorRef.markForCheck`)\n * - triggers change-detection differently if ViewEngine or Ivy is present (`ChangeDetectorRef.detectChanges` or `ÉµdetectChanges`)\n * - distinct same values in a row (distinctUntilChanged operator),\n *\n * @usageNotes\n *\n * ### Examples\n *\n * The `*ngrxLet` directive take over several things and makes it more convenient and save to work with streams in the template\n * `<ng-container *ngrxLet=\"observableNumber$ as c\"></ng-container>`\n *\n * ```html\n * <ng-container *ngrxLet=\"observableNumber$ as n\">\n * <app-number [number]=\"n\">\n * </app-number>\n * </ng-container>\n *\n * <ng-container *ngrxLet=\"observableNumber$; let n\">\n * <app-number [number]=\"n\">\n * </app-number>\n * </ng-container>\n * ```\n *\n * In addition to that it provides us information from the whole observable context.\n * We can track the observables:\n * - next value\n * - error value\n * - complete state\n *\n * ```html\n * <ng-container *ngrxLet=\"observableNumber$; let n; let e = $error, let c = $complete\">\n * <app-number [number]=\"n\"  *ngIf=\"!e && !c\">\n * </app-number>\n * <ng-container *ngIf=\"e\">\n * There is an error: {{e}}\n * </ng-container>\n * <ng-container *ngIf=\"c\">\n * Observable completed: {{c}}\n * </ng-container>\n * </ng-container>\n * ```\n *\n * @publicApi\n */\n@Directive({ selector: '[ngrxLet]' })\nexport class LetDirective<U> implements OnDestroy {\n  private embeddedView: any;\n  private readonly ViewContext: LetViewContext<U | undefined | null> = {\n    $implicit: undefined,\n    ngrxLet: undefined,\n    $error: false,\n    $complete: false,\n  };\n\n  private readonly configSubject = new ReplaySubject<NgRxLetConfig>();\n  private readonly config$ = this.configSubject.pipe(\n    filter(v => v !== undefined && v !== null),\n    distinctUntilChanged(),\n    startWith({ optimized: true })\n  );\n\n  protected readonly subscription: Unsubscribable;\n  private readonly cdAware: CdAware<U | null | undefined>;\n  private readonly resetContextObserver: NextObserver<unknown> = {\n    next: () => {\n      // if not initialized no need to set undefined\n      if (this.embeddedView) {\n        this.ViewContext.$implicit = undefined;\n        this.ViewContext.ngrxLet = undefined;\n        this.ViewContext.$error = false;\n        this.ViewContext.$complete = false;\n      }\n    },\n  };\n  private readonly updateViewContextObserver: PartialObserver<\n    U | null | undefined\n  > = {\n    next: (value: U | null | undefined) => {\n      // to have init lazy\n      if (!this.embeddedView) {\n        this.createEmbeddedView();\n      }\n      this.ViewContext.$implicit = value;\n      this.ViewContext.ngrxLet = value;\n    },\n    error: (error: Error) => {\n      // to have init lazy\n      if (!this.embeddedView) {\n        this.createEmbeddedView();\n      }\n      this.ViewContext.$error = true;\n    },\n    complete: () => {\n      // to have init lazy\n      if (!this.embeddedView) {\n        this.createEmbeddedView();\n      }\n      this.ViewContext.$complete = true;\n    },\n  };\n\n  static ngTemplateContextGuard<U>(\n    dir: LetDirective<U>,\n    ctx: unknown\n  ): ctx is LetViewContext<U> {\n    return true;\n  }\n\n  private readonly configurableBehaviour = <T>(\n    o$: Observable<Observable<T>>\n  ): Observable<Observable<T>> =>\n    o$.pipe(\n      withLatestFrom(this.config$),\n      // @NOTICE: unused config => As discussed with Brandon we keep it here because in the beta release we implement configuration behavior here\n      map(([value$, config]) => {\n        return value$.pipe(catchError(e => EMPTY));\n      })\n    );\n\n  @Input()\n  set ngrxLet(\n    potentialObservable: Observable<U> | Promise<U> | null | undefined\n  ) {\n    this.cdAware.next(potentialObservable);\n  }\n\n  @Input()\n  set ngrxLetConfig(config: NgRxLetConfig) {\n    this.configSubject.next(config || { optimized: true });\n  }\n\n  constructor(\n    cdRef: ChangeDetectorRef,\n    ngZone: NgZone,\n    private readonly templateRef: TemplateRef<LetViewContext<U>>,\n    private readonly viewContainerRef: ViewContainerRef\n  ) {\n    this.cdAware = createCdAware<U>({\n      work: setUpWork({\n        cdRef,\n        ngZone,\n        context: (cdRef as EmbeddedViewRef<Type<any>>).context,\n      }),\n      resetContextObserver: this.resetContextObserver,\n      updateViewContextObserver: this.updateViewContextObserver,\n      configurableBehaviour: this.configurableBehaviour,\n    });\n    this.subscription = this.cdAware.subscribe();\n  }\n\n  createEmbeddedView() {\n    this.embeddedView = this.viewContainerRef.createEmbeddedView(\n      this.templateRef,\n      this.ViewContext\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.viewContainerRef.clear();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { LetDirective } from './let';\nimport { PushPipe } from './push';\n\nconst DECLARATIONS = [LetDirective, PushPipe];\nconst EXPORTS = [DECLARATIONS];\n\n@NgModule({\n  declarations: [DECLARATIONS],\n  exports: [EXPORTS],\n})\nexport class ReactiveComponentModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["markDirty","detectChanges"],"mappings":"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"}