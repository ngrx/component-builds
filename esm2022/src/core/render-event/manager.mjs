import { Observable, pipe, ReplaySubject } from 'rxjs';
import { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';
import { combineRenderEventHandlers } from './handlers';
import { fromPotentialObservable, } from '../potential-observable';
import { untracked } from '@angular/core';
export function createRenderEventManager(handlers) {
    const handleRenderEvent = combineRenderEventHandlers(handlers);
    const potentialObservable$ = new ReplaySubject(1);
    return {
        nextPotentialObservable(potentialObservable) {
            potentialObservable$.next(potentialObservable);
        },
        handlePotentialObservableChanges() {
            return potentialObservable$.pipe(distinctUntilChanged(), switchMapToRenderEvent(), distinctUntilChanged(renderEventComparator), tap(handleRenderEvent));
        },
    };
}
function switchMapToRenderEvent() {
    return pipe(switchMap((potentialObservable) => {
        const observable$ = fromPotentialObservable(potentialObservable);
        let reset = true;
        let synchronous = true;
        return new Observable((subscriber) => {
            const subscription = untracked(() => observable$.subscribe({
                next(value) {
                    subscriber.next({ type: 'next', value, reset, synchronous });
                    reset = false;
                },
                error(error) {
                    subscriber.next({ type: 'error', error, reset, synchronous });
                    reset = false;
                },
                complete() {
                    subscriber.next({ type: 'complete', reset, synchronous });
                    reset = false;
                },
            }));
            if (reset) {
                subscriber.next({ type: 'suspense', reset, synchronous: true });
                reset = false;
            }
            synchronous = false;
            return subscription;
        });
    }));
}
function renderEventComparator(previous, current) {
    if (previous.type !== current.type || previous.reset !== current.reset) {
        return false;
    }
    if (current.type === 'next') {
        return previous.value === current.value;
    }
    if (current.type === 'error') {
        return previous.error === current.error;
    }
    return true;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL21vZHVsZXMvY29tcG9uZW50L3NyYy9jb3JlL3JlbmRlci1ldmVudC9tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXRFLE9BQU8sRUFBRSwwQkFBMEIsRUFBdUIsTUFBTSxZQUFZLENBQUM7QUFDN0UsT0FBTyxFQUNMLHVCQUF1QixHQUV4QixNQUFNLHlCQUF5QixDQUFDO0FBQ2pDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFTMUMsTUFBTSxVQUFVLHdCQUF3QixDQUN0QyxRQUE0RDtJQUU1RCxNQUFNLGlCQUFpQixHQUFHLDBCQUEwQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQy9ELE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxhQUFhLENBQUssQ0FBQyxDQUFDLENBQUM7SUFFdEQsT0FBTztRQUNMLHVCQUF1QixDQUFDLG1CQUFtQjtZQUN6QyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUNqRCxDQUFDO1FBQ0QsZ0NBQWdDO1lBQzlCLE9BQU8sb0JBQW9CLENBQUMsSUFBSSxDQUM5QixvQkFBb0IsRUFBRSxFQUN0QixzQkFBc0IsRUFBRSxFQUN4QixvQkFBb0IsQ0FBQyxxQkFBcUIsQ0FBQyxFQUMzQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FDdkIsQ0FBQztRQUNKLENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsc0JBQXNCO0lBRzdCLE9BQU8sSUFBSSxDQUNULFNBQVMsQ0FBQyxDQUFDLG1CQUFtQixFQUFFLEVBQUU7UUFDaEMsTUFBTSxXQUFXLEdBQUcsdUJBQXVCLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUNqRSxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBRXZCLE9BQU8sSUFBSSxVQUFVLENBQ25CLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFDYixNQUFNLFlBQVksR0FBRyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQ2xDLFdBQVcsQ0FBQyxTQUFTLENBQUM7Z0JBQ3BCLElBQUksQ0FBQyxLQUFLO29CQUNSLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztvQkFDN0QsS0FBSyxHQUFHLEtBQUssQ0FBQztnQkFDaEIsQ0FBQztnQkFDRCxLQUFLLENBQUMsS0FBSztvQkFDVCxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7b0JBQzlELEtBQUssR0FBRyxLQUFLLENBQUM7Z0JBQ2hCLENBQUM7Z0JBQ0QsUUFBUTtvQkFDTixVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztvQkFDMUQsS0FBSyxHQUFHLEtBQUssQ0FBQztnQkFDaEIsQ0FBQzthQUNGLENBQUMsQ0FDSCxDQUFDO1lBRUYsSUFBSSxLQUFLLEVBQUUsQ0FBQztnQkFDVixVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Z0JBQ2hFLEtBQUssR0FBRyxLQUFLLENBQUM7WUFDaEIsQ0FBQztZQUNELFdBQVcsR0FBRyxLQUFLLENBQUM7WUFFcEIsT0FBTyxZQUFZLENBQUM7UUFDdEIsQ0FBQyxDQUNGLENBQUM7SUFDSixDQUFDLENBQUMsQ0FDSCxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMscUJBQXFCLENBQzVCLFFBQXdCLEVBQ3hCLE9BQXVCO0lBRXZCLElBQUksUUFBUSxDQUFDLElBQUksS0FBSyxPQUFPLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQyxLQUFLLEtBQUssT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3ZFLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxNQUFNLEVBQUUsQ0FBQztRQUM1QixPQUFRLFFBQStCLENBQUMsS0FBSyxLQUFLLE9BQU8sQ0FBQyxLQUFLLENBQUM7SUFDbEUsQ0FBQztJQUVELElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxPQUFPLEVBQUUsQ0FBQztRQUM3QixPQUFRLFFBQTZCLENBQUMsS0FBSyxLQUFLLE9BQU8sQ0FBQyxLQUFLLENBQUM7SUFDaEUsQ0FBQztJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIHBpcGUsIFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBzd2l0Y2hNYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEVycm9yUmVuZGVyRXZlbnQsIE5leHRSZW5kZXJFdmVudCwgUmVuZGVyRXZlbnQgfSBmcm9tICcuL21vZGVscyc7XG5pbXBvcnQgeyBjb21iaW5lUmVuZGVyRXZlbnRIYW5kbGVycywgUmVuZGVyRXZlbnRIYW5kbGVycyB9IGZyb20gJy4vaGFuZGxlcnMnO1xuaW1wb3J0IHtcbiAgZnJvbVBvdGVudGlhbE9ic2VydmFibGUsXG4gIFBvdGVudGlhbE9ic2VydmFibGVSZXN1bHQsXG59IGZyb20gJy4uL3BvdGVudGlhbC1vYnNlcnZhYmxlJztcbmltcG9ydCB7IHVudHJhY2tlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlbmRlckV2ZW50TWFuYWdlcjxQTz4ge1xuICBuZXh0UG90ZW50aWFsT2JzZXJ2YWJsZShwb3RlbnRpYWxPYnNlcnZhYmxlOiBQTyk6IHZvaWQ7XG4gIGhhbmRsZVBvdGVudGlhbE9ic2VydmFibGVDaGFuZ2VzKCk6IE9ic2VydmFibGU8XG4gICAgUmVuZGVyRXZlbnQ8UG90ZW50aWFsT2JzZXJ2YWJsZVJlc3VsdDxQTz4+XG4gID47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSZW5kZXJFdmVudE1hbmFnZXI8UE8+KFxuICBoYW5kbGVyczogUmVuZGVyRXZlbnRIYW5kbGVyczxQb3RlbnRpYWxPYnNlcnZhYmxlUmVzdWx0PFBPPj5cbik6IFJlbmRlckV2ZW50TWFuYWdlcjxQTz4ge1xuICBjb25zdCBoYW5kbGVSZW5kZXJFdmVudCA9IGNvbWJpbmVSZW5kZXJFdmVudEhhbmRsZXJzKGhhbmRsZXJzKTtcbiAgY29uc3QgcG90ZW50aWFsT2JzZXJ2YWJsZSQgPSBuZXcgUmVwbGF5U3ViamVjdDxQTz4oMSk7XG5cbiAgcmV0dXJuIHtcbiAgICBuZXh0UG90ZW50aWFsT2JzZXJ2YWJsZShwb3RlbnRpYWxPYnNlcnZhYmxlKSB7XG4gICAgICBwb3RlbnRpYWxPYnNlcnZhYmxlJC5uZXh0KHBvdGVudGlhbE9ic2VydmFibGUpO1xuICAgIH0sXG4gICAgaGFuZGxlUG90ZW50aWFsT2JzZXJ2YWJsZUNoYW5nZXMoKSB7XG4gICAgICByZXR1cm4gcG90ZW50aWFsT2JzZXJ2YWJsZSQucGlwZShcbiAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgICAgc3dpdGNoTWFwVG9SZW5kZXJFdmVudCgpLFxuICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZChyZW5kZXJFdmVudENvbXBhcmF0b3IpLFxuICAgICAgICB0YXAoaGFuZGxlUmVuZGVyRXZlbnQpXG4gICAgICApO1xuICAgIH0sXG4gIH07XG59XG5cbmZ1bmN0aW9uIHN3aXRjaE1hcFRvUmVuZGVyRXZlbnQ8UE8+KCk6IChcbiAgc291cmNlOiBPYnNlcnZhYmxlPFBPPlxuKSA9PiBPYnNlcnZhYmxlPFJlbmRlckV2ZW50PFBvdGVudGlhbE9ic2VydmFibGVSZXN1bHQ8UE8+Pj4ge1xuICByZXR1cm4gcGlwZShcbiAgICBzd2l0Y2hNYXAoKHBvdGVudGlhbE9ic2VydmFibGUpID0+IHtcbiAgICAgIGNvbnN0IG9ic2VydmFibGUkID0gZnJvbVBvdGVudGlhbE9ic2VydmFibGUocG90ZW50aWFsT2JzZXJ2YWJsZSk7XG4gICAgICBsZXQgcmVzZXQgPSB0cnVlO1xuICAgICAgbGV0IHN5bmNocm9ub3VzID0gdHJ1ZTtcblxuICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlPFJlbmRlckV2ZW50PFBvdGVudGlhbE9ic2VydmFibGVSZXN1bHQ8UE8+Pj4oXG4gICAgICAgIChzdWJzY3JpYmVyKSA9PiB7XG4gICAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gdW50cmFja2VkKCgpID0+XG4gICAgICAgICAgICBvYnNlcnZhYmxlJC5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgICBuZXh0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHsgdHlwZTogJ25leHQnLCB2YWx1ZSwgcmVzZXQsIHN5bmNocm9ub3VzIH0pO1xuICAgICAgICAgICAgICAgIHJlc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVycm9yKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHsgdHlwZTogJ2Vycm9yJywgZXJyb3IsIHJlc2V0LCBzeW5jaHJvbm91cyB9KTtcbiAgICAgICAgICAgICAgICByZXNldCA9IGZhbHNlO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBjb21wbGV0ZSgpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoeyB0eXBlOiAnY29tcGxldGUnLCByZXNldCwgc3luY2hyb25vdXMgfSk7XG4gICAgICAgICAgICAgICAgcmVzZXQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGlmIChyZXNldCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHsgdHlwZTogJ3N1c3BlbnNlJywgcmVzZXQsIHN5bmNocm9ub3VzOiB0cnVlIH0pO1xuICAgICAgICAgICAgcmVzZXQgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3luY2hyb25vdXMgPSBmYWxzZTtcblxuICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSlcbiAgKTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyRXZlbnRDb21wYXJhdG9yPFQ+KFxuICBwcmV2aW91czogUmVuZGVyRXZlbnQ8VD4sXG4gIGN1cnJlbnQ6IFJlbmRlckV2ZW50PFQ+XG4pOiBib29sZWFuIHtcbiAgaWYgKHByZXZpb3VzLnR5cGUgIT09IGN1cnJlbnQudHlwZSB8fCBwcmV2aW91cy5yZXNldCAhPT0gY3VycmVudC5yZXNldCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChjdXJyZW50LnR5cGUgPT09ICduZXh0Jykge1xuICAgIHJldHVybiAocHJldmlvdXMgYXMgTmV4dFJlbmRlckV2ZW50PFQ+KS52YWx1ZSA9PT0gY3VycmVudC52YWx1ZTtcbiAgfVxuXG4gIGlmIChjdXJyZW50LnR5cGUgPT09ICdlcnJvcicpIHtcbiAgICByZXR1cm4gKHByZXZpb3VzIGFzIEVycm9yUmVuZGVyRXZlbnQpLmVycm9yID09PSBjdXJyZW50LmVycm9yO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG4iXX0=