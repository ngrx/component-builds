import { Observable, pipe, ReplaySubject } from 'rxjs';
import { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';
import { combineRenderEventHandlers } from './handlers';
import { fromPotentialObservable, } from '../potential-observable';
export function createRenderEventManager(handlers) {
    const handleRenderEvent = combineRenderEventHandlers(handlers);
    const potentialObservable$ = new ReplaySubject(1);
    return {
        nextPotentialObservable(potentialObservable) {
            potentialObservable$.next(potentialObservable);
        },
        handlePotentialObservableChanges() {
            return potentialObservable$.pipe(distinctUntilChanged(), switchMapToRenderEvent(), distinctUntilChanged(renderEventComparator), tap(handleRenderEvent));
        },
    };
}
function switchMapToRenderEvent() {
    return pipe(switchMap((potentialObservable) => {
        const observable$ = fromPotentialObservable(potentialObservable);
        let reset = true;
        let synchronous = true;
        return new Observable((subscriber) => {
            const subscription = observable$.subscribe({
                next(value) {
                    subscriber.next({ type: 'next', value, reset, synchronous });
                    reset = false;
                },
                error(error) {
                    subscriber.next({ type: 'error', error, reset, synchronous });
                    reset = false;
                },
                complete() {
                    subscriber.next({ type: 'complete', reset, synchronous });
                    reset = false;
                },
            });
            if (reset) {
                subscriber.next({ type: 'suspense', reset, synchronous: true });
                reset = false;
            }
            synchronous = false;
            return subscription;
        });
    }));
}
function renderEventComparator(previous, current) {
    if (previous.type !== current.type || previous.reset !== current.reset) {
        return false;
    }
    if (current.type === 'next') {
        return previous.value === current.value;
    }
    if (current.type === 'error') {
        return previous.error === current.error;
    }
    return true;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL21vZHVsZXMvY29tcG9uZW50L3NyYy9jb3JlL3JlbmRlci1ldmVudC9tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXRFLE9BQU8sRUFBRSwwQkFBMEIsRUFBdUIsTUFBTSxZQUFZLENBQUM7QUFDN0UsT0FBTyxFQUNMLHVCQUF1QixHQUV4QixNQUFNLHlCQUF5QixDQUFDO0FBU2pDLE1BQU0sVUFBVSx3QkFBd0IsQ0FDdEMsUUFBNEQ7SUFFNUQsTUFBTSxpQkFBaUIsR0FBRywwQkFBMEIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMvRCxNQUFNLG9CQUFvQixHQUFHLElBQUksYUFBYSxDQUFLLENBQUMsQ0FBQyxDQUFDO0lBRXRELE9BQU87UUFDTCx1QkFBdUIsQ0FBQyxtQkFBbUI7WUFDekMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDakQsQ0FBQztRQUNELGdDQUFnQztZQUM5QixPQUFPLG9CQUFvQixDQUFDLElBQUksQ0FDOUIsb0JBQW9CLEVBQUUsRUFDdEIsc0JBQXNCLEVBQUUsRUFDeEIsb0JBQW9CLENBQUMscUJBQXFCLENBQUMsRUFDM0MsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQ3ZCLENBQUM7UUFDSixDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLHNCQUFzQjtJQUc3QixPQUFPLElBQUksQ0FDVCxTQUFTLENBQUMsQ0FBQyxtQkFBbUIsRUFBRSxFQUFFO1FBQ2hDLE1BQU0sV0FBVyxHQUFHLHVCQUF1QixDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDakUsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQztRQUV2QixPQUFPLElBQUksVUFBVSxDQUNuQixDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ2IsTUFBTSxZQUFZLEdBQUcsV0FBVyxDQUFDLFNBQVMsQ0FBQztnQkFDekMsSUFBSSxDQUFDLEtBQUs7b0JBQ1IsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO29CQUM3RCxLQUFLLEdBQUcsS0FBSyxDQUFDO2dCQUNoQixDQUFDO2dCQUNELEtBQUssQ0FBQyxLQUFLO29CQUNULFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztvQkFDOUQsS0FBSyxHQUFHLEtBQUssQ0FBQztnQkFDaEIsQ0FBQztnQkFDRCxRQUFRO29CQUNOLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO29CQUMxRCxLQUFLLEdBQUcsS0FBSyxDQUFDO2dCQUNoQixDQUFDO2FBQ0YsQ0FBQyxDQUFDO1lBRUgsSUFBSSxLQUFLLEVBQUU7Z0JBQ1QsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2dCQUNoRSxLQUFLLEdBQUcsS0FBSyxDQUFDO2FBQ2Y7WUFDRCxXQUFXLEdBQUcsS0FBSyxDQUFDO1lBRXBCLE9BQU8sWUFBWSxDQUFDO1FBQ3RCLENBQUMsQ0FDRixDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQ0gsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLHFCQUFxQixDQUM1QixRQUF3QixFQUN4QixPQUF1QjtJQUV2QixJQUFJLFFBQVEsQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDLElBQUksSUFBSSxRQUFRLENBQUMsS0FBSyxLQUFLLE9BQU8sQ0FBQyxLQUFLLEVBQUU7UUFDdEUsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxNQUFNLEVBQUU7UUFDM0IsT0FBUSxRQUErQixDQUFDLEtBQUssS0FBSyxPQUFPLENBQUMsS0FBSyxDQUFDO0tBQ2pFO0lBRUQsSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLE9BQU8sRUFBRTtRQUM1QixPQUFRLFFBQTZCLENBQUMsS0FBSyxLQUFLLE9BQU8sQ0FBQyxLQUFLLENBQUM7S0FDL0Q7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBwaXBlLCBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgc3dpdGNoTWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBFcnJvclJlbmRlckV2ZW50LCBOZXh0UmVuZGVyRXZlbnQsIFJlbmRlckV2ZW50IH0gZnJvbSAnLi9tb2RlbHMnO1xuaW1wb3J0IHsgY29tYmluZVJlbmRlckV2ZW50SGFuZGxlcnMsIFJlbmRlckV2ZW50SGFuZGxlcnMgfSBmcm9tICcuL2hhbmRsZXJzJztcbmltcG9ydCB7XG4gIGZyb21Qb3RlbnRpYWxPYnNlcnZhYmxlLFxuICBQb3RlbnRpYWxPYnNlcnZhYmxlUmVzdWx0LFxufSBmcm9tICcuLi9wb3RlbnRpYWwtb2JzZXJ2YWJsZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVuZGVyRXZlbnRNYW5hZ2VyPFBPPiB7XG4gIG5leHRQb3RlbnRpYWxPYnNlcnZhYmxlKHBvdGVudGlhbE9ic2VydmFibGU6IFBPKTogdm9pZDtcbiAgaGFuZGxlUG90ZW50aWFsT2JzZXJ2YWJsZUNoYW5nZXMoKTogT2JzZXJ2YWJsZTxcbiAgICBSZW5kZXJFdmVudDxQb3RlbnRpYWxPYnNlcnZhYmxlUmVzdWx0PFBPPj5cbiAgPjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlbmRlckV2ZW50TWFuYWdlcjxQTz4oXG4gIGhhbmRsZXJzOiBSZW5kZXJFdmVudEhhbmRsZXJzPFBvdGVudGlhbE9ic2VydmFibGVSZXN1bHQ8UE8+PlxuKTogUmVuZGVyRXZlbnRNYW5hZ2VyPFBPPiB7XG4gIGNvbnN0IGhhbmRsZVJlbmRlckV2ZW50ID0gY29tYmluZVJlbmRlckV2ZW50SGFuZGxlcnMoaGFuZGxlcnMpO1xuICBjb25zdCBwb3RlbnRpYWxPYnNlcnZhYmxlJCA9IG5ldyBSZXBsYXlTdWJqZWN0PFBPPigxKTtcblxuICByZXR1cm4ge1xuICAgIG5leHRQb3RlbnRpYWxPYnNlcnZhYmxlKHBvdGVudGlhbE9ic2VydmFibGUpIHtcbiAgICAgIHBvdGVudGlhbE9ic2VydmFibGUkLm5leHQocG90ZW50aWFsT2JzZXJ2YWJsZSk7XG4gICAgfSxcbiAgICBoYW5kbGVQb3RlbnRpYWxPYnNlcnZhYmxlQ2hhbmdlcygpIHtcbiAgICAgIHJldHVybiBwb3RlbnRpYWxPYnNlcnZhYmxlJC5waXBlKFxuICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgICAgICBzd2l0Y2hNYXBUb1JlbmRlckV2ZW50KCksXG4gICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKHJlbmRlckV2ZW50Q29tcGFyYXRvciksXG4gICAgICAgIHRhcChoYW5kbGVSZW5kZXJFdmVudClcbiAgICAgICk7XG4gICAgfSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3dpdGNoTWFwVG9SZW5kZXJFdmVudDxQTz4oKTogKFxuICBzb3VyY2U6IE9ic2VydmFibGU8UE8+XG4pID0+IE9ic2VydmFibGU8UmVuZGVyRXZlbnQ8UG90ZW50aWFsT2JzZXJ2YWJsZVJlc3VsdDxQTz4+PiB7XG4gIHJldHVybiBwaXBlKFxuICAgIHN3aXRjaE1hcCgocG90ZW50aWFsT2JzZXJ2YWJsZSkgPT4ge1xuICAgICAgY29uc3Qgb2JzZXJ2YWJsZSQgPSBmcm9tUG90ZW50aWFsT2JzZXJ2YWJsZShwb3RlbnRpYWxPYnNlcnZhYmxlKTtcbiAgICAgIGxldCByZXNldCA9IHRydWU7XG4gICAgICBsZXQgc3luY2hyb25vdXMgPSB0cnVlO1xuXG4gICAgICByZXR1cm4gbmV3IE9ic2VydmFibGU8UmVuZGVyRXZlbnQ8UG90ZW50aWFsT2JzZXJ2YWJsZVJlc3VsdDxQTz4+PihcbiAgICAgICAgKHN1YnNjcmliZXIpID0+IHtcbiAgICAgICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBvYnNlcnZhYmxlJC5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgbmV4dCh2YWx1ZSkge1xuICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoeyB0eXBlOiAnbmV4dCcsIHZhbHVlLCByZXNldCwgc3luY2hyb25vdXMgfSk7XG4gICAgICAgICAgICAgIHJlc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3IoZXJyb3IpIHtcbiAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHsgdHlwZTogJ2Vycm9yJywgZXJyb3IsIHJlc2V0LCBzeW5jaHJvbm91cyB9KTtcbiAgICAgICAgICAgICAgcmVzZXQgPSBmYWxzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb21wbGV0ZSgpIHtcbiAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHsgdHlwZTogJ2NvbXBsZXRlJywgcmVzZXQsIHN5bmNocm9ub3VzIH0pO1xuICAgICAgICAgICAgICByZXNldCA9IGZhbHNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChyZXNldCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHsgdHlwZTogJ3N1c3BlbnNlJywgcmVzZXQsIHN5bmNocm9ub3VzOiB0cnVlIH0pO1xuICAgICAgICAgICAgcmVzZXQgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3luY2hyb25vdXMgPSBmYWxzZTtcblxuICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSlcbiAgKTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyRXZlbnRDb21wYXJhdG9yPFQ+KFxuICBwcmV2aW91czogUmVuZGVyRXZlbnQ8VD4sXG4gIGN1cnJlbnQ6IFJlbmRlckV2ZW50PFQ+XG4pOiBib29sZWFuIHtcbiAgaWYgKHByZXZpb3VzLnR5cGUgIT09IGN1cnJlbnQudHlwZSB8fCBwcmV2aW91cy5yZXNldCAhPT0gY3VycmVudC5yZXNldCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChjdXJyZW50LnR5cGUgPT09ICduZXh0Jykge1xuICAgIHJldHVybiAocHJldmlvdXMgYXMgTmV4dFJlbmRlckV2ZW50PFQ+KS52YWx1ZSA9PT0gY3VycmVudC52YWx1ZTtcbiAgfVxuXG4gIGlmIChjdXJyZW50LnR5cGUgPT09ICdlcnJvcicpIHtcbiAgICByZXR1cm4gKHByZXZpb3VzIGFzIEVycm9yUmVuZGVyRXZlbnQpLmVycm9yID09PSBjdXJyZW50LmVycm9yO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG4iXX0=